<application>
  <component name="AppStorage">
    <histories>
      <item value="it was to integrate the Yintrust website with WeChat Official Accounts." />
      <item value="Initially, it was to integrate the Yintrust website with DingTalk App." />
      <item value="Due to changing requirements, this app is now **deprecated**." />
      <item value="dingtalk" />
      <item value="contacts" />
      <item value="It is used to display the category details page, showing how many technologies are in each category, and what are they." />
      <item value="This is the categories app." />
      <item value="This application does not use a database, that is, there is no ``models`` class, but in order to improve access speed, Redis cache is used." />
      <item value="Originally, we envisioned adding it as a ``Blog`` tag to the top navigation bar of the Yintrust website, and now it is used as a ``Resources`` tag." />
      <item value="retrieves" />
      <item value="It retrieves the articles that WeChat Official Accounts has pushed by calling the interface and displays them on the Yintrust website." />
      <item value="This is the blog app." />
      <item value="Specifically, it is divided into the following apps:" />
      <item value="A Django project is usually divided into multiple ``apps``, and this project is no exception." />
      <item value="The overall structure of the website is deployed on `AWS EC2`_, and image-related static files are deployed on On `AWS S3`_." />
      <item value="use Flower_ to monitor and manage Celery in real time." />
      <item value="use Celery_ as a distributed task queue," />
      <item value="use Kibana_ to visualize data," />
      <item value="use Filebeat_ to collect log information," />
      <item value="Use Elasticsearch_ to provide search support for the website," />
      <item value="uses MailHog_ to test mail services," />
      <item value="project directory structure" />
      <item value="uses Redis_ to cache common data," />
      <item value="This project is written using the Django_ backend framework, which uses the `Closure library`_ as the front-end JavaScript library," />
      <item value="The relationship diagram of all models is as follows:" />
      <item value="In addition, in order to extend the functionality of Django, the following extensions are used:" />
      <item value="Set ``verbose_name`` and ``help_text`` for each field in the model." />
      <item value="Define the corresponding ``__str__`` method for each model." />
      <item value="Register the necessary models on the admin page." />
      <item value="Do not perform database queries during import." />
      <item value="Use the ``render()`` function instead of the ``render_to_response()`` function to render the template" />
      <item value="Use class-based views instead of function-based views" />
      <item value="Also, you should clone this project to your local machine." />
      <item value="The build and deployment are based on Docker, so you must have a Docker environment." />
      <item value="Changes to docstring in code do not trigger automatic builds and refreshes." />
      <item value="Then open your browser and visit http://0.0.0.0:9000 , subsequent changes are automatically built and refreshed." />
      <item value="Generate document coverage report" />
      <item value="Clear build generated files" />
      <item value="It is recommended to run once after each new diagram is added." />
      <item value="Generate model diagram" />
      <item value="It is recommended to run once after each source code update." />
      <item value="Generate API documentation" />
      <item value="Just build the document without running" />
      <item value="Build and run this document **locally**:" />
      <item value="Build docker image" />
      <item value="Start docker container" />
      <item value="Shut down docker container" />
      <item value="Clean up files and free up space" />
      <item value="Produce a tab-separated list of (url_pattern, view_function, name) tuples for a project" />
      <item value="Compile the newly generated localization file" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="179" />
        <entry key="ENGLISH" value="180" />
        <entry key="LATIN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE" />
        <option name="useTranslateGoogleCom" value="false" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
  </component>
</application>